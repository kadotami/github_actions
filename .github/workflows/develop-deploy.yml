on:
  pull_request:
    types: [opened, synchronize]

jobs:
  rubocop:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ruby: [ '2.5.x' ]
    outputs:
      error_count: ${{ steps.count_error.outputs.rubocop-error-count }}
      error_log: ${{ steps.annotate_rubocop.outputs.rubocop-log }}
    steps:
      - uses: actions/checkout@v1

      - name: fetch base branch
        run: |
          git fetch --depth 1 origin ${{ github.base_ref }}

      - name: Set up Ruby version
        uses: actions/setup-ruby@master
        with:
          ruby-version : ${{ matrix.ruby }}

      - name: Set up bundler
        run: gem install bundler

      - name: Cache gems
        uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-

      - name: bundle install
        run: bundle install --path vendor/bundle --quiet --jobs 4 --retry 3

      - name: Cache rubocop
        uses: actions/cache@v1
        with:
          path: ~/.cache/rubocop_cache
          key: ${{ runner.os }}-rubocop-${{ github.head_ref }}
          restore-keys: |
            ${{ runner.os }}-rubocop-

      - name: Rubocop checks
        id: run_rubocop
        run: | 
          bundle exec rubocop  $(git diff origin/${{ github.base_ref }} HEAD --diff-filter=AM --name-only -- "*.rb" ) --parallel > rubocop_out.txt
      
      - name: count error
        if: always()
        id: count_error
        run: echo "::set-output name=rubocop-error-count::$(grep -c "^.*:[0-9]\+:[0-9]\+:\s.*" rubocop_out.txt)"

      - name: annotate Rubocop
        #slackに送る文言も整形している
        if: failure()
        id: annotate_rubocop
        run: |
          echo "::add-matcher::.github/annotations/rubocop.json"
          rubocoplog=$(cat rubocop_out.txt | sed '1,5d' | sed '$d' | sed '/^$/d' | sed -e 's/^.*:[0-9]\+:[0-9]\+:\s.*/```\n```\n & /g') 
          rubocoplog="${rubocoplog//'%'/'%25'}"
          rubocoplog="${rubocoplog//$'\n'/'%0A'}"
          rubocoplog="${rubocoplog//$'\r'/'%0D'}"
          echo "::set-output name=rubocop-log::$rubocoplog"
          cat rubocop_out.txt

  front-lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [ '10.x' ]
    outputs:
      stylelint_error_count: ${{ steps.count_error.outputs.stylelint-error-count }}
      stylelint_error_log: ${{ steps.annotate_stylelint.outputs.stylelint-log }}
    steps:
      - uses: actions/checkout@v1

      - name: fetch base branch
        run: |
          git fetch --depth 1 origin ${{ github.base_ref }}

      - name: Set up node version
        uses: actions/setup-node@master
        with:
          node-version : ${{ matrix.node }}

      - name: npm install
        run: npm install

      - name: stylelint checks
        id: run_stylelint
        run: |
          node_modules/.bin/stylelint --no-color $(git diff origin/${{ github.base_ref }} HEAD --diff-filter=AM --name-only -- "*.scss")  > stylelint_out.txt
      
      - name: count error
        if: always()
        id: count_error
        run: echo "::set-output name=stylelint-error-count::$(grep -c "^\\s+((\\d+):(\\d+))?\\s+(✖|×)\\s+(.*)\\s{3,}(.*)$" stylelint_out.txt)"
        
      - name: annotate stylelint
        if: failure()
        id: annotate_stylelint
        run: |
          echo "::add-matcher::.github/annotations/stylelint.json"
          stylelintlog=$(cat stylelint_out.txt | sed -e 's/^.*:[0-9]\+:[0-9]\+:\s.*/```\n```\n & /g') 
          stylelintlog="${stylelintlog//'%'/'%25'}"
          stylelintlog="${stylelintlog//$'\n'/'%0A'}"
          stylelintlog="${stylelintlog//$'\r'/'%0D'}"
          echo "::set-output name=stylelint-log::$stylelintlog"
          cat stylelint_out.txt

  linter_failure_result:
    needs: [rubocop, front-lint]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: test
        run: |
          echo $(expr ${{ needs.rubocop.outputs.error_count }} + ${{ needs.front-lint.outputs.stylelint_error_count }} ) issues found!
          cat ${{ needs.rubocop.outputs.error_log }} ${{ needs.front-lint.outputs.stylelint_error_log }} | sed '1,2d'
      # - name: send message
      #   if: failure()
      #   uses: pullreminders/slack-action@master
      #   with:
      #     args: |
      #       {
      #         \"channel\":\"CS9TN6R9S\",
      #         \"attachments\": [
      #           {
      #             \"color\":\"#F32013\",
      #             \"blocks\":[
      #               {
      #                 \"type\":\"header\",
      #                 \"text\":{
      #                   \"type\":\"plain_text\",
      #                   \"text\":\"${{ needs.rubocop.outputs.error_count + needs.front-lint.outputs.stylelint_error_count }} Issues Found!"
      #                 }
      #               },
      #               {
      #                 \"type\":\"section\",
      #                 \"text\":{
      #                   \"type\":\"mrkdwn\",
      #                   \"text\":\"PR Name: <${{ github.event.pull_request.html_url }}| ${{ github.event.pull_request.title }} @${{ github.event.pull_request.user.login }}>\n```\n${{ steps.annotate_rubocop.outputs.rubocop-log}}\n```\"
      #                 }
      #               }
      #             ]
      #           }
      #         ]
      #       }
      #   env:
      #     SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  linter_success_result:
    needs: [rubocop, front-lint]
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: send message
        run: echo success


  # rspec:
  #   needs: [rubocop, eslint]
  #   runs-on: ubuntu-latest

  #   strategy:
  #     matrix:
  #       ruby: [ '2.5.x' ]
  #   steps:
  #     - uses: actions/checkout@v1
  #     - name: Set up Ruby version
  #       uses: actions/setup-ruby@master
  #       with:
  #         ruby-version : ${{ matrix.ruby }}

  #     - name: Set up bundler
  #       run: gem install bundler

  #     - name: Cache gems
  #       uses: actions/cache@v1
  #       with:
  #         path: vendor/bundle
  #         key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-gem-

  #     - name: bundle install
  #       run: bundle install --path vendor/bundle --quiet --jobs 4 --retry 3

  #     - name: Setup Database
  #       run: |
  #         bundle exec rake db:create
  #         bundle exec rake db:schema:load
  #         bundle exec rake db:seed_fu
  #       env:
  #         RAILS_ENV: test

  #     - name: run rspec
  #       run: |
  #         # bundle exec rake elasticsearch:research:info
  #         bundle exec rspec spec --format progress


  # e2e_survey:
  #   needs: [rubocop, eslint]
  #   runs-on: ubuntu-latest

  #   strategy:
  #     matrix:
  #       node: [ '10' ]
  #   steps:
  #     - run: echo 'e2e_survey!'

  # e2e_dashboard:
  #   needs: [rubocop, eslint]
  #   runs-on: ubuntu-latest

  #   strategy:
  #     matrix:
  #       node: [ '10' ]
  #   steps:
  #     - run: echo 'e2e_dashboard!'

  # build:
  #   needs: [rspec, e2e_survey, e2e_dashboard]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: echo 'deploy!'

  # deploy:
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: echo 'deploy!'
