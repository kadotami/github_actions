on:
  push:
    branches:
      - feature/*
      - bugfix/*
      - hotfix/*
  
jobs:
  linter:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ruby: [ '2.5.x' ]
    steps:
      - uses: actions/checkout@v1

      - name: Set up Ruby version
        uses: actions/setup-ruby@master
        with:
          ruby-version : ${{ matrix.ruby }}

      - name: apt-get
        run: |
          sudo apt-get update
          sudo apt-get install libmysqlclient-dev

      - name: Set up bundler
        run: gem install bundler

      - name: Cache gems
        uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-

      - name: bundle install
        run: bundle install

      - name: Cache rubocop
        uses: actions/cache@v1
        with:
          path: ~/.cache/rubocop_cache
          key: ${{ runner.os }}-rubocop-${{ github.head_ref }}
          restore-keys: |
            ${{ runner.os }}-rubocop-
            ${{ runner.os }}-rubocop-${{ github.base_ref }}
            ${{ runner.os }}-rubocop-${{ hashFiles('**/.rubocop.yml') }}
  
      - name: enable problem matcher
        if: always()
        run: |
          echo "::add-matcher::.github/annotations/rubocop.json"
  
      - name: Rubocop checks
        id: test
        run: | 
          echo "test1"
          output=$(bundle exec rubocop --parallel)
          echo "test2"
          output="${output//'%'/'%25'}"
          output="${output//$'\n'/'%0A'}"
          output="${output//$'\r'/'%0D'}"
          echo $output
          echo "::set-output name=rubocop_out::$output"
      
      - name: annotate Rubocop
        if: always()
        run: | 
          echo ${{ steps.test.rubocop_out }}

      # - name: echo
      #   if: always()
      #   run: echo "$(tail -n 1 rubocop_out.txt)"

  rspec:
    needs: linter
    runs-on: ubuntu-latest

    strategy:
      matrix:
        ruby: [ '2.5.x' ]
    steps:
      - run: echo 'rspec!'

  e2e_survey:
    needs: linter
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node: [ '10' ]
    steps:
      - run: echo 'e2e_survey!'

  e2e_dashboard:
    needs: linter
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node: [ '10' ]
    steps:
      - run: echo 'e2e_dashboard!'

  build:
    needs: [rspec, e2e_survey, e2e_dashboard]
    runs-on: ubuntu-latest
    steps:
      - run: echo 'deploy!'

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - run: echo 'deploy!'
