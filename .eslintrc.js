/*
ðŸ‘‹ Hi! This file was autogenerated by tslint-to-eslint-config.
https://github.com/typescript-eslint/tslint-to-eslint-config
It represents the closest reasonable ESLint configuration to this
project's original TSLint configuration.
We recommend eventually switching this configuration to extend from
the recommended rulesets in typescript-eslint. 
https://github.com/typescript-eslint/tslint-to-eslint-config/blob/master/docs/FAQs.md
Happy linting! ðŸ’–
*/
module.exports = {
  "env": {
      "browser": true,
      "es6": true,
      "node": true
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
      "project": "tsconfig.json",
      "sourceType": "module"
  },
  "plugins": [
      "eslint-plugin-import",
      "@typescript-eslint",
      "@typescript-eslint/tslint"
  ],
  "rules": {
      "@typescript-eslint/dot-notation": "off",
      "@typescript-eslint/explicit-member-accessibility": [
          "off",
          {
              "accessibility": "explicit"
          }
      ],
      "@typescript-eslint/indent": "error",
      "@typescript-eslint/member-ordering": "error",
      "@typescript-eslint/naming-convention": "error",
      "@typescript-eslint/no-empty-function": "off",
      "@typescript-eslint/no-inferrable-types": "off",
      "@typescript-eslint/no-unused-expressions": "error",
      "@typescript-eslint/no-use-before-define": "error",
      "comma-dangle": "error",
      "complexity": [
          "off",
          {
              "max": 30
          }
      ],
      "eqeqeq": [
          "error",
          "smart"
      ],
      "guard-for-in": "error",
      "id-blacklist": "off",
      "id-match": "off",
      "import/no-default-export": "error",
      "no-bitwise": "error",
      "no-caller": "error",
      "no-cond-assign": "error",
      "no-console": [
          "error",
          {
              "allow": [
                  "log",
                  "dirxml",
                  "warn",
                  "error",
                  "dir",
                  "timeLog",
                  "assert",
                  "clear",
                  "count",
                  "countReset",
                  "group",
                  "groupCollapsed",
                  "groupEnd",
                  "table",
                  "Console",
                  "markTimeline",
                  "profile",
                  "profileEnd",
                  "timeline",
                  "timelineEnd",
                  "timeStamp",
                  "context"
              ]
          }
      ],
      "no-constant-condition": "error",
      "no-control-regex": "off",
      "no-debugger": "error",
      "no-empty": "off",
      "no-eval": "error",
      "no-fallthrough": "error",
      "no-invalid-regexp": "error",
      "no-invalid-this": "error",
      "no-irregular-whitespace": "error",
      "no-magic-numbers": "off",
      "no-new-wrappers": "error",
      "no-redeclare": "error",
      "no-regex-spaces": "error",
      "no-shadow": [
          "error",
          {
              "hoist": "all"
          }
      ],
      "no-sparse-arrays": "error",
      "no-underscore-dangle": "off",
      "no-unsafe-finally": "error",
      "no-unused-labels": "error",
      "no-var": "error",
      "radix": "error",
      "use-isnan": "off",
      "@typescript-eslint/tslint/config": [
          "error",
          {
              "rules": {
                  "block-spacing": true,
                  "no-duplicate-case": true,
                  "no-empty-character-class": true,
                  "no-ex-assign": true,
                  "no-extra-boolean-cast": true,
                  "no-extra-semi": true,
                  "no-multi-spaces": true,
                  "no-unexpected-multiline": true,
                  "no-unused-new": true,
                  "whitespace": [
                      true,
                      "check-branch",
                      "check-decl",
                      "check-operator",
                      "check-separator",
                      "check-type"
                  ]
              }
          }
      ]
  }
};
